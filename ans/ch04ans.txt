■第4章の解答：目次■
・・・・・・・・・・・・・・・・・・・・・
第4章：前章の理解度チェック
4.1：練習問題
4.2：練習問題
4.3：練習問題
4.4：練習問題
4.5：練習問題
4.6：練習問題
4.7：練習問題
4.8：練習問題
4.9：練習問題
第4章：第4章の理解度チェック
第4章：総合理解度チェック
・・・・・・・・・・・・・・・・・・・・・

第4章：前章の理解度チェック

【1】 コードのブロックとは、1つの論理的な単位として単一のステートメントと同様に扱えるゼロ個以上のステートメントのことです。ブロックにするには対象のステートメントグループを{}で囲みます。

【2】 タブ文字は、2文字の文字列「\t」で表されます。print("\t")でタブを表示します。

【3】 インクリメント演算子を使い、++count;またはcount++;と書き換えられます。

【4】 ブール型

4.1：練習問題

【1】 elseは常に、まだelseが関連付けられていない同じブロック内の最も近いifに関連付けられます。たとえば2を指定すると実行結果は次のようになります。

i > 0 and i <= 3

【2】 if (count == 5)

4.2：練習問題

【1】 
class Countdown {
  public static void main(String args[]) {
    int i = Integer.valueOf(args[0]).intValue();
    for(int j = i; j > 0; j--)
      System.out.print(j + " ");
    System.out.print("\u0007"); // ベルを鳴らす
    System.out.println("");
  }
}

実行結果はたとえば次のようになります（10を指定）。

10 9 8 7 6 5 4 3 2 1

【2】
class Progression {
  public static void main(String args[]) {
    for(int i = 1; i < 1000; i = i + i) // 1から999までループ(iは自身に加算)
      System.out.print(i + " ");
    System.out.println("");
  }
}

実行結果は次のとおりです。

1 2 4 8 16 32 64 128 256 512

4.3：練習問題

【1】 
class SumArguments {
  public static void main(String args[]) {
    int i = args.length; // 引数の数
    double sum = 0;
    while(i > 0) { // 引数を1つずつ取り出し
      double d = Double.valueOf(args[i - 1]).doubleValue();
      sum = sum + d;
      --i;
    }
    System.out.println("Sum is " + sum);
  }
}

実行結果はたとえば次のようになります（0.5 12.31を指定）。

Sum is 12.81

【2】
class SumRandom {
  public static void main(String args[]) {
    double sum = 0;
    while(sum <= 20) { // sumが20以内の間ループ
      sum += Math.random();
      System.out.println(sum);
    }
  }
}

実行結果はたとえば次のようになります。

0.3205942166242862
1.1671084606609794
1.1749249693138892
1.9094643382660248
2.7663773752939234
3.5516710531132896
4.3946068927512965
4.739033634109186
5.122651278387012
6.008552772622415
6.634094678260678
7.091672719648401
7.304007031419763
7.362396739088728
8.201687953434382
8.914740588708323
9.244237459484863
9.903052211929985
10.29095557621892
10.436805512382788
10.75077045610972
10.880289352986313
11.513064341295413
12.128513368252854
12.210923006108306
12.850381520217894
13.405510673227402
13.527127840289305
13.733765636012759
14.674439492030139
15.610236896686956
15.72102625577599
15.823716024766469
16.32543833218698
16.967458389487536
17.954131007072306
18.432591510908573
19.037464347755495
19.375654582997516
19.80598429799523
19.850740863256807
20.35182724606462

4.4：練習問題

【1】 
class Fibonacci {
  public static void main(String args[]) {
    int count = 0;
    int i = 0;
    int j = 1;
    do {
      System.out.print(j + " ");
      int k = i + j; // 2つの値の和
      i = j; // 直前の値として代入
      j = k;
    } while(++count < 15); // 15個表示するまでループ
    System.out.println("");
  }
}

実行結果は次のとおりです。

1 1 2 3 5 8 13 21 34 55 89 144 233 377 610


【2】 
int i = 0;
while(i < 10) {
  // ステートメント
  i = i + 2;
}


4.5：練習問題

【1】
class CommandLineArguments {
  public static void main(String args[]) {
    int count = 0;
    for(int i = 0; i < args.length; i++) {
      for(int j = 0; j < args[i].length(); j++)
        System.out.print(args[i]);
      System.out.println("");
    }
  }
}

実行結果はたとえば次のようになります（a bc defを指定）。

Total number of characters: 6

【2】
class Primes100To200 {
  public static void main(String args[]) {
    for(int number = 100; number <= 200; number++) {
      // 要素のテスト
      boolean prime = true;
      for(int i = 2; i < number / 2; i++)
        if ((number % i) == 0) prime = false;
      // 素数の場合は表示
      if (prime == true) {
        System.out.print(number + " ");
      }
    }
    System.out.println("");
  }
}

実行結果は次のとおりです。

101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199

4.6：練習問題

【1】
class ArgumentChecker {
  public static void main(String args[]) {
    for(int i = 0; i < args.length; i++) {
      char ch = args[i].charAt(0);
      if (!Character.isLetter(ch) ||
        !Character.isUpperCase(ch)) { // 先頭文字が文字ではないか、大文字ではない
        System.out.println("Arguments must begin " +
          "with an upper case letter");
        break;
      }
    }
  }
}

実行結果はたとえば次のようになります（aを指定）。

Arguments must begin with an upper case letter

【2】 （省略）

4.7：練習問題

【1】 
class OddNumbers {
  public static void main(String args[]) {
    for(int i = 1; i < 101; i++) {
      if (i % 2 == 0)
        continue;
      System.out.print(i + " ");
    }
    System.out.println("");
  }
}

実行結果は次のとおりです。

1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99

4.8：練習問題

【1】 「定数式が必要です。」というコンパイルエラーになります。caseステートメントには定数式が必要です。

【2】 （省略）

4.9：練習問題

【1】 
255
15
255
254
1020

【2】
class CountOnes {
  public static void main(String args[]) {
    byte count = 0;
    int number = Integer.parseInt(args[0]); // 整数を受け取り
    for(int i = 31; i >= 0; i--) {          // 整数32ビット分のループ
      if ((number & 0x80000000) != 0)       // 32ビットの先頭の桁が1かどうかを判定（32ビット値で最初のビットが1である0x80000000と論理積を取る）
        ++count;
      number <<= 1; // 左に1つシフト
    }
    System.out.println(count + " bits are set");
  }
}

実行結果はたとえば次のようになります（255を指定）。

8 bits are set

第4章：第4章の理解度チェック

【1】 for(;;) {...}またはwhile(true) {...}またはdo {...} while(true)

【2】 breakステートメントは、中括弧の中のループの実行を停止します。実行は、ループの次のステートメントまたは指定のラベル位置から再開されます。

【3】 continueステートメントは、ループの次の繰り返しまたは指定のラベル位置からの繰り返しを強制的に発生させて、そのステートメントとテスト条件との間のすべてのコードを飛ばします。

【4】 正しい。

【5】 
for(int i = 10; i > 0; i--) {
  // ...
}

【6】 doループはそのステートメントブロックを少なくとも1回実行します。

【7】 >>演算子は、符号拡張子付きの右シフトを意味し、>>>演算子はゼロ充填ありの右シフトを意味します。

第4章：総合理解度チェック

【1】 
class MoneyAdder {
  public static void main(String args[]) {
    float sum = 0;
    int i = 0;
    int quantity = 0;
    float value = 0;
    while(i < args.length) {
      quantity = Integer.parseInt(args[i]); // 数値
      ++i;
      value = 1;
      if (args[i].equals("pennies"))        // 単位
        value = 1;
      else if (args[i].equals("nickels"))
        value = 5;
      else if (args[i].equals("dimes"))
        value = 10;
      else if (args[i].equals("quarters"))
        value = 25;
      else {
          System.out.println("Unrecognized coin");
          return;
      }
      sum += quantity * value;
      ++i;
    }
    System.out.println("Sum is $" + sum / 100);
  }
}

実行結果はたとえば次のようになります（引数は5 nickels 4 quarters 2 dimes）。

sum is $1.45

【2】
class SpanishTranslator {
  public static void main(String args[]) {
    if (args[0].equals("One"))
      System.out.println("Uno");
    else if (args[0].equals("Two"))
      System.out.println("Dos");
    else if (args[0].equals("Three"))
      System.out.println("Tres");
    else if (args[0].equals("Four"))
      System.out.println("Quatro");
    else if (args[0].equals("Five"))
      System.out.println("Cinco");
    else
      System.out.println("Unrecognized input");
  }
}

実行結果はたとえば次のようになります（引数はOne）。

Uno
