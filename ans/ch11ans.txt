■第11章の解答：目次■
・・・・・・・・・・・・・・・・・・・・・
第11章：前章の理解度チェック
11.1：練習問題
11.2：練習問題
11.3：練習問題
11.4：練習問題
11.5：練習問題
11.6：練習問題
11.7：練習問題
第11章：第11章の理解度チェック
第11章：総合理解度チェック
・・・・・・・・・・・・・・・・・・・・・

第11章：前章の理解度チェック

【1】 
import java.util.*;

class DaysTillEndOfYear {
  public static void main(String args[]) {
    // 年の始めから現在までの日数を求める
    Calendar calendar1 = Calendar.getInstance();
    int doy1 = calendar1.get(Calendar.DAY_OF_YEAR);

    // 現在の年を求める
    int year = calendar1.get(Calendar.YEAR);

    // 年の始めから12月31日までの日数を求める
    Calendar calendar2 = new GregorianCalendar(year, 11, 31);
    int doy2 = calendar2.get(Calendar.DAY_OF_YEAR);

    // 今年の残りの日数を計算する
    int days = doy2 - doy1;
    System.out.println(days +
      " days remain in current year");
  }
}

実行結果はたとえば次のようになります。

274 days remain in current year

【2】 
import java.util.*;

class Producer extends Thread {
  Queue queue;

  Producer(Queue queue) {
    this.queue = queue;
  }

  public void run() {
    int i = 0;
    while(true) {
      queue.add(i++);
    }
  }
}

class Consumer extends Thread {
  String str;
  Queue queue;

  Consumer(String str, Queue queue) {
    this.str = str;
    this.queue = queue;
  }

  public void run() {
    while(true) {
      System.out.println(str + ": " + queue.remove());
    }
  }
}

class Queue {
  private final static int SIZE = 5;
  private Vector<Integer> queue = new Vector<Integer>();
  private int count = 0;

  synchronized void add(int i) {
    // 待ち行列が満杯である間は待機する
    while(count == SIZE) {
      try {
        wait();
      }
      catch(InterruptedException ie) {
        ie.printStackTrace();
        System.exit(0);
      }
    }

    // 待ち行列にデータを追加する
    queue.add(i);

    // カウントを増分する
    ++count;

    // 待機スレッドに通知する
    notifyAll();
  }

  synchronized int remove() {
    // 待ち行列が空の間は待機する
    while(count == 0) {
      try {
        wait();
      }
      catch(InterruptedException ie) {
        ie.printStackTrace();
        System.exit(0);
      }
    }

    // 待ち行列からデータを読み取る
    Integer iobj = queue.firstElement();
    queue.removeElement(iobj);

    // カウントを減分する
    --count;

    // 待機スレッドに通知する
    notifyAll();

    // 待ち行列の要素を返す
    return iobj.intValue();
  }
}

class ProducerConsumers {
  public static void main(String args[]) {
    Queue queue = new Queue();
    new Producer(queue).start();
    new Consumer("ConsumerA", queue).start();
    new Consumer("ConsumerB", queue).start();
    new Consumer("ConsumerC", queue).start();
  }
}

実行結果はたとえば次のようになります。

ConsumerA: 0
ConsumerC: 1
ConsumerA: 3
ConsumerC: 4
ConsumerA: 5
ConsumerA: 6
ConsumerB: 2
ConsumerA: 7
…

【3】 
import java.util.*;

class Worker extends Thread {
  final static int NUMWORKERS = 10;

  Toolbox toolbox;
  int id;

  public Worker(Toolbox toolbox, int id) {
    this.toolbox = toolbox;
    this.id = id;
  }

  public void run() {
    try {
      // 無限ループを設定する
      while(true) {
        // ツールのうちの2つを取得する
        Tool tools[] = toolbox.getTools();

        // ツールを使用する
        int t = (int)(10000 * Math.random() + 10000);
        Thread.sleep(t);

        // ツールを解放する
        toolbox.releaseTools(tools);

        // さらに作業を行うまでスリープする
        Thread.sleep(20000);
      }
    }
    catch(Exception e) {
    }
  }
}

class Tool {
  final static int NUMTOOLS = 4;
  int id;

  public Tool(int id) {
    this.id = id;
  }

  public String toString() {
    return "" + id;
  }
}

class Toolbox {
  private Stack<Tool> tools = new Stack<Tool>();

  public Toolbox() {
    for(int i = 0; i < Tool.NUMTOOLS; i++) {
      tools.push(new Tool(i));
    }
  }

  public synchronized Tool[] getTools() {
    while(true) {
      // 2つのツールが利用可能であるかどうかをチェックする
      if (tools.size() >= 2) {
        Tool tool0 = tools.pop();
        Tool tool1 = tools.pop();
        System.out.println("Get tools " + tool0 + " " + tool1);
        Tool a[] = new Tool[2];
        a[0] = tool0;
        a[1] = tool1;
        return a;
      }

      // 2つのツールが利用可能になるまで待機する
      try {
        wait();
      }
      catch(InterruptedException ie) {
        ie.printStackTrace();
      }
    }
  }

  public synchronized void releaseTools(Tool a[]) {
    // ツールボックスにツールを戻す
    System.out.println("Release tools " + a[0] + " " + a[1]);
    tools.push(a[0]);
    tools.push(a[1]);

    // すべての待機スレッドに通知する
    notifyAll();
  }
}

class WorkersTools {
  public static void main(String args[]) {
    // Toolboxオブジェクトを作成する
    Toolbox toolbox = new Toolbox();

    // Workerオブジェクトを作成する
    for(int i = 0; i < Worker.NUMWORKERS; i++) {
      new Worker(toolbox, i).start();
    }
  }
}

実行結果はたとえば次のようになります。

Get tools 3 2
Get tools 1 0
Release tools 1 0
Get tools 0 1
Release tools 3 2
Get tools 2 3
Release tools 0 1
Get tools 1 0
Release tools 2 3
Get tools 3 2
…

11.1：練習問題

【1】 
import java.io.*;

class Rename {
  public static void main(String args[]) {
    try {
      // 古いファイルに対するFileオブジェクトを作成する
      File oldFile = new File(args[0]);

      // 新しいファイルに対するFileオブジェクトを作成する
      File newFile = new File(args[1]);

      // 名前をoldFileからnewFileに変更する
      boolean result = oldFile.renameTo(newFile);

      // 結果を表示する
      System.out.println(result);
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
}

実行結果はたとえば次のようになります（sample.txtというファイルを用意し、@<tt>{sample.txt sample2.txt}を引数に指定）。

true

11.2：練習問題

【1】 
import java.io.*;

class DigitCounter {
  public static void main(String args[]) {
    try {
      // 数字のカウントを保持するように配列を割り当てる
      int counts[] = new int[10];

      // FileReaderオブジェクトを作成する
      FileReader fr = new FileReader(args[0]);

      // 文字を読み取る
      int i;
      while((i = fr.read()) != -1) {
        char c = (char)i;
        int k = c - '0';
        if (k >= 0 && k < 10)
          ++counts[k];
      }

      // 数字のカウントを表示する
      for(int j = 0; j < 10; j++) {
        char c = (char)('0' + j);
        System.out.print(c + "=");
        System.out.print(counts[j] + "; ");
      }
      System.out.println();

      // FileReaderオブジェクトをクローズする
      fr.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

実行結果はたとえば次のようになります。

0=2; 1=4; 2=1; 3=1; 4=1; 5=1; 6=1; 7=1; 8=1; 9=1;

【2】 
import java.io.*;

class FileCopy {
  public static void main(String args[]) {
    try {
      // FileReaderオブジェクトを作成する
      FileReader fr = new FileReader(args[0]);

      // FileWriterオブジェクトを作成する
      FileWriter fw = new FileWriter(args[1]);

      // 文字を読み取って、コピーする
      int i;
      while((i = fr.read()) != -1) {
        fw.write(i);
      }

      // FileWriterをクローズする
      fw.close();

      // FileReaderをクローズする
      fr.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

11.3：練習問題

【1】 
import java.io.*;

class TabFilter {
  public static void main(String args[]) {
    try {
      // BufferedReaderオブジェクトを作成する
      FileReader fr = new FileReader(args[0]);
      BufferedReader br = new BufferedReader(fr);

      // BufferedWriterオブジェクトを作成する
      FileWriter fw = new FileWriter(args[1]);
      BufferedWriter bw = new BufferedWriter(fw);

      // タブをスペース文字に変換する
      String s;
      while((s = br.readLine()) != null) {
        StringBuffer sb = new StringBuffer();
        for(int i = 0; i < s.length(); i++) {
          char c = s.charAt(i);
          if (c == '\t')
            c = ' ';
          sb.append(c);
        }
        s = sb.toString() + "\n";
        bw.write(s, 0, s.length());
      }

      // BufferedReaderオブジェクトおよびBufferedWriterオブジェクトをクローズする
      br.close();
      bw.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

実行結果はたとえば次のようになります。

変換前ファイル：
A	B		C
D	E

変換後ファイル：
A B  C
D E

【2】 
import java.io.*;

class ReverseConsoleInput {
  public static void main(String args[]) {
    try {
      // InputStreamReaderオブジェクトを作成する
      InputStreamReader isr = new InputStreamReader(System.in);

      // BufferedReaderオブジェクトを作成する
      BufferedReader br = new BufferedReader(isr);

      // コンソールから行を読み取って、処理する
      String s;
      while((s = br.readLine()) != null) {
        for(int i = s.length() - 1; i >= 0; i--) {
          char c = s.charAt(i);
          System.out.print(c);
        }
        System.out.println("");
      }

      // BufferedReaderオブジェクトをクローズする
      br.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

実行結果はたとえば次のようになります。

abcdef（この部分を入力）
fedcba

11.4：練習問題

【1】 
import java.io.*;

class PrintWriterDemo2 {
  public static void main(String args[]) {
    try {
      // PrintWriterオブジェクトを作成する
      FileWriter fw = new FileWriter(args[0]);
      BufferedWriter bw = new BufferedWriter(fw);
      PrintWriter pw = new PrintWriter(bw, false); // フラッシュしない

      // スレッドを利用する
      pw.println(true);
      pw.println('A');
      pw.println(500);
      pw.println(40000L);
      pw.println(45.67f);
      pw.println(45.67);
      pw.println("Hello");
      pw.println(new Integer("99"));

      // PrintWriterオブジェクトをクローズする
      pw.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

11.5：練習問題

【1】 
// このアプリケーションを使用する構文は次のとおり。
//    java FileSplitter inputfile outputfile filesize
// ここで、inputfileは分割するファイルの名前。
// バイトは、inputfileから読み取り、
// inputfile内のすべてのバイトを読み取るまで、
// outputfile0、outputfile1、outputfile2等に書き込む。
// 各outputfileのサイズはfilesizeで指定する。
// inputfileおよびoutputfileは必須引数である。
// filesizeを省略した場合は、値1024が使用される。

import java.io.*;

class FileSplitter {
  public static void main(String args[]) {
    try {
      // FileInputStreamオブジェクトを作成する
      FileInputStream fis =
        new FileInputStream(args[0]);

      // バッファのサイズを求める
      int size = 1024;
      if (args.length > 2) {
        size = Integer.parseInt(args[2]);
      }

      // 正しいサイズのバッファを作成する
      byte buffer[] = new byte[size];

      // カウントを初期化する
      int count = 0;

      // ファイルからのデータを処理する
      while(true) {
        // ファイルからブロックを読み取る
        int i = fis.read(buffer, 0, size);
        if (i == -1)
          break;

        // 出力ファイルを作成する
        String filename = args[1] + count;
        FileOutputStream fos =
          new FileOutputStream(filename);
        fos.write(buffer, 0, i);
        fos.flush();
        fos.close();

        // カウントを増分する
        ++count;
      }
      fis.close();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
}

// このアプリケーションを使用する構文は次のとおり。
//    java FileMerger inputfile outputfile
// ここで、データはinputfile0、inputfile1等から読み取り、
// outputfileに書き込む。これらの引数はどちらも
// 必須である。

import java.io.*;

class FileMerger {
  private final static int BUFFERSIZE = 1024;

  public static void main(String args[]) {
    try {
      // FileOutputStreamオブジェクトを作成する
      FileOutputStream fos =
        new FileOutputStream(args[1]);

      // バッファを作成する
      byte buffer[] = new byte[BUFFERSIZE];

      // カウントを初期化する
      int count = 0;

      // 入力ファイルからのデータを処理する
      while(true) {
        // FileInputStreamオブジェクトを作成する
        String filename = args[0] + count;
        FileInputStream fis;
        try {
          fis = new FileInputStream(filename);
        }
        catch(FileNotFoundException fnfex) {
          break;
        }

        // ファイルからのデータを処理する
        while(true) {
          // ファイルからブロックを読み取る
          int i = fis.read(buffer, 0, BUFFERSIZE);
          if (i == -1)
            break;

          // 出力ファイルにデータを付加する
          fos.write(buffer, 0, i);
          fos.flush();
        }
        fis.close();

        // カウントを増分する
        ++count;
      }

      // 出力ファイルをクローズする
      fos.close();
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
}

【2】 
import java.io.*;

class FibonacciOut {
  public static void main(String args[]) {
    try {
      // FileOutputStreamオブジェクトを作成する
      FileOutputStream fos =
        new FileOutputStream(args[0]);

      // DataOutputStreamオブジェクトを作成する
      DataOutputStream dos =
        new DataOutputStream(fos);

      // 15個のフィボナッチ数を書き込む
      int count = 0;
      int i = 0;
      int j = 1;
      do {
        dos.writeShort(j);
        int k = i + j;
        i = j;
        j = k;
      } while(++count < 15);

      // DataOutputStreamオブジェクトをクローズする
      dos.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

import java.io.*;

class FibonacciIn {
  public static void main(String args[]) {
    try {
      // FileInputStreamオブジェクトを作成する
      FileInputStream fis =
        new FileInputStream(args[0]);

      // DataInputStreamオブジェクトを作成する
      DataInputStream dis =
        new DataInputStream(fis);

      // データを読み取って、表示する
      for(int i = 0; i < 15; i++) {
        System.out.format("%3d\n", dis.readShort());
      }
      System.out.println();

      // DataInputStreamオブジェクトをクローズする
      dis.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

実行結果は次のようになります。

  1
  1
  2
  3
  5
  8
 13
 21
 34
 55
 89
144
233
377
610

11.6：練習問題

【1】 
import java.io.*;

class ReverseFile {
  public static void main(String args[]) {
    try {
      // RandomAccessFileオブジェクトを作成する
      RandomAccessFile raf =
        new RandomAccessFile(args[0], "r");

      // ファイル内の位置を初期化する
      long position = raf.length();

      // ファイル内の文字を処理する
      while(position > 0) {
        // 位置を更新する
        position -= 1;

        // 文字をシークして、読み取る
        raf.seek(position);
        char c = (char)raf.readByte();

        // 文字を表示する
        System.out.print(c);
      }
      raf.close();
      System.out.println("");
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
}

実行結果はたとえば次のようになります（ReverseFile.javaを指定）。

}
}
}
;)(ecarTkcatStnirp.e
{ )e noitpecxE(hctac
}
;)""(nltnirp.tuo.metsyS
}
…

11.7：練習問題

【1】 
import java.io.*;

class StreamTokenizerDemo3 {
  public static void main(String args[]) {
    try {
      // FileReaderオブジェクトを作成する
      FileReader fr = new FileReader(args[0]);

      // BufferedReaderオブジェクトを作成する
      BufferedReader br = new BufferedReader(fr);

      // StreamTokenizerオブジェクトを作成する
      StreamTokenizer st = new StreamTokenizer(br);

      // ファイルの終わりをトークンと見なす
      st.eolIsSignificant(true);

      // 行をカウントする変数を宣言する
      int lines = 1;

      // トークンを処理する
      while(st.nextToken() != StreamTokenizer.TT_EOF) {
        switch(st.ttype) {
          case StreamTokenizer.TT_EOL:
            ++lines;
        }
      }

      // 行の数を表示する
      System.out.println("There are " + lines + " lines");

      // BufferedReaderをクローズする
      br.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

実行結果はたとえば次のようになります（StreamTokenizerDemo3.javaを指定）。

There are 40 lines

【2】
import java.io.*;

class StreamTokenizerDemo4 {
  public static void main(String args[]) {
    try {
      // FileReaderオブジェクトを作成する
      FileReader fr = new FileReader(args[0]);

      // BufferedReaderオブジェクトを作成する
      BufferedReader br = new BufferedReader(fr);

      // StreamTokenizerオブジェクトを作成する
      StreamTokenizer st = new StreamTokenizer(br);

      // トークンを処理する
      while(st.nextToken() != StreamTokenizer.TT_EOF) {
        switch(st.ttype) {
          case StreamTokenizer.TT_WORD:
            System.out.format("%02d) %s\n", st.lineno(), st.sval);
            break;
          case StreamTokenizer.TT_NUMBER:
            System.out.format("%02d) %s\n", st.lineno(), st.nval);
            break;
          default:
            System.out.format("%02d) %c\n", st.lineno(), (char)st.ttype);
        }
      }

      // BufferedReaderオブジェクトをクローズする
      br.close();
    }
    catch(Exception e) {
      System.out.println("Exception: " + e);
    }
  }
}

実行結果はたとえば次のようになります（StreamTokenizerDemo4.javaを指定）。

01) import
01) java.io.
01) *
01) ;
03) class
03) StreamTokenizerDemo4
03) {
04) public
04) static
04) void
04) main
04) (
04) String
04) args
…

第11章：第11章の理解度チェック

【1】 ストリームとは、データの源流または宛先のいずれかを抽象的に表したものです。

【2】 文字ストリームとバイトストリームは両方とも、バイトの読み取りおよび書き込みを行います。ただし、文字ストリームは、ユーザー環境に適した文字エンコーディング規則を使用して文字とバイト間で変換を行います。

【3】 入力文字ストリームおよび出力文字ストリームのスーパークラスはReaderとWriterです。

【4】 入力バイトストリームおよび出力バイトストリームのスーパークラスはInputStreamとOutputStreamです。

【5】 
import java.io.*;

class DirectoryTree {
  public static void main(String args[]) {
    // ファイルが存在するかどうかをチェックする
    File file = new File(args[0]);
    if (!file.exists()) {
      System.out.println(args[0] + " does not exist.");
      return;
    }

    // ディレクトリツリーを表示する
    tree(args[0]);
  }

  public static void tree(String filename) {
    // Fileファイルオブジェクトを作成する
    File file = new File(filename);

    // ファイルがディレクトリでない場合は、
    // ファイル名を表示して返す
    if (!file.isDirectory()) {
      System.out.println(filename);
      return;
    }

    // このディレクトリの内容を処理する
    String files[] = file.list();
    for(int i = 0; i < files.length; i++) {
      tree(filename + File.separator + files[i]);
    }
  }
}

実行結果はたとえば次のようになります（c:\tyj\examples\ioを指定）。

c:\tyj\examples\io\Producer.class
c:\tyj\examples\io\DaysTillEndoOfyear.java
c:\tyj\examples\io\DaysTillEndoOfyear.class
…

【6】 
import java.io.*;

class FilteredDirectoryTree {
  public static void main(String args[]) {
    String suffix = null;
    if (args.length > 1) {
      suffix = args[1];
    }
    tree(args[0], suffix);
  }

  public static void tree(String filename, String suffix) {
    // Fileオブジェクトを作成する
    File file = new File(filename);

    // ファイルがディレクトリでない場合は、
    // ファイル名を表示して返す
    if (!file.isDirectory()) {
      if (suffix == null || filename.endsWith(suffix))
        System.out.println(filename);
      return;
    }

    // このディレクトリの内容を処理する
    String files[] = file.list();
    for(int i = 0; i < files.length; i++) {
      tree(filename + File.separator + files[i], suffix);
    }
  }
}

実行結果はたとえば次のようになります（c:\tyj\examples\io .classを指定）。

c:\tyj\examples\io\Producer.class
c:\tyj\examples\io\DaysTillEndoOfyear.class
c:\tyj\examples\io\Queue.class
…

【7】 
import java.io.*;

class FilteredDirectoryTreeSizes {
  public static void main(String args[]) {
    String suffix = null;
    if (args.length > 1) {
      suffix = args[1];
    }
    tree(args[0], suffix);
  }

  public static void tree(String filename, String suffix) {
    // Fileオブジェクトを作成する
    File file = new File(filename);

    // ファイルがディレクトリでない場合は、
    // ファイル名とサイズを表示して返す
    if (!file.isDirectory()) {
      if (suffix == null || filename.endsWith(suffix)) {
        long length = file.length();
        System.out.println(filename + ": " + length);
      }
      return;
    }

    // このディレクトリの内容を処理する
    String files[] = file.list();
    for(int i = 0; i < files.length; i++) {
      tree(filename + File.separator + files[i], suffix);
    }
  }
}

実行結果はたとえば次のようになります（c:\tyj\examples\io .classを指定）。

c:\tyj\examples\io\Producer.class: 387
c:\tyj\examples\io\DaysTillEndoOfyear.class: 878
c:\tyj\examples\io\Queue.class: 1139
…

第11章：総合理解度チェック

【1】 
import java.io.*;

class CircleArea {
  static BufferedReader br;

  public static void main(String args[]) {
    try {
      // 標準入力のBufferedReaderオブジェクトを取得する
      InputStreamReader isr =
        new InputStreamReader(System.in);
      br = new BufferedReader(isr);

      while(true) {
        // 半径の入力をユーザーに求める
        System.out.print("Radius? ");

        // ユーザー入力を処理する
        String str = br.readLine();
        double radius;
        try {
          radius = Double.valueOf(str).doubleValue();
        }
        catch(NumberFormatException nfe) {
          System.out.println("Incorrect format!");
          continue;
        }

        // 半径が0より大きいかどうかをチェックする
        if (radius <= 0) {
          System.out.println("Radius must be positive!");
          continue;
        }

        // 面積を表示して返す
        double area = Math.PI * radius * radius;
        System.out.println("Area is " + area);
        br.close();
        return;
      }
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
}

実行すると、Radius?と尋ねられます。実行結果はたとえば次のようになります（5を指定）。

Area is 78.53981633974483

【2】
/** Documentation comment */
/** Multiple */ /** Documentation comments */ /** in one line */
import java.io.*;

class DocComments {
  public static void main(String args[]) {
    try {
      FileReader fr = new FileReader(args[0]);
      BufferedReader br = new BufferedReader(fr);

      boolean display = false;

      String line;
      while((line = br.readLine()) != null) {
        char array[] = line.toCharArray();
        int length = array.length;
        int i = 0;
        while(true) {
          if (i >= length)
            break;
          if (array[i] == '/') {
            if ((i + 1) < length && array[i + 1] ==  '*') {
              if ((i + 2) < length && array[i + 2] == '*') {
                display = true;
                i += 3;
                continue;
              }
            }
          }
          else if (array[i] == '*') {
            if ((i + 1) < length && array[i + 1] == '/') {
              display = false;
              System.out.println("");
              i += 2;
              continue;
            }
          }
          if (display)
            System.out.print(array[i]);
          i += 1;
        }
      }
      br.close();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
}

実行結果はたとえば次のようになります（DocComments.javaを指定）。

 Documentation comment
 Multiple
 Documentation comments
 in one line

【3】 
import java.io.*;
import java.util.*;

public class Employees {
  public static void main(String args[]) {
    try {
      // FileReaderオブジェクトを作成する
      FileReader fr = new FileReader(args[0]);

      // BufferedReaderオブジェクトを作成する
      BufferedReader br = new BufferedReader(fr);

      // ファイルから行を読み取る
      String s;
      while((s = br.readLine()) != null) {
        // StringTokenizerオブジェクトを作成する
        StringTokenizer st =
          new StringTokenizer(s, ";");

        // トークンを出力する
        System.out.format("Name: %s\n", st.nextToken());
        System.out.format("Location: %s\n", st.nextToken());
        System.out.format("Phone: %s\n\n", st.nextToken());
      }

      // BufferReaderオブジェクトをクローズする
      br.close();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
}
