■第15章の解答：目次■
・・・・・・・・・・・・・・・・・・・・・
第15章：前章の理解度チェック
・・・・・・・・・・・・・・・・・・・・・

第15章：前章の理解度チェック

【1】 
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
/*
  <applet code="SuspendImageAnimation" width=280 height=280>
  <param name="count" value="4">
  <param name="file0" value="slide0.jpg">
  <param name="file1" value="slide1.jpg">
  <param name="file2" value="slide2.jpg">
  <param name="file3" value="slide3.jpg">
  <param name="msec" value="1000">
  </applet>
*/

public class SuspendImageAnimation extends JApplet
implements Runnable {
  int count;
  Image images[];
  int msec;
  int index;
  boolean suspendFlag;
  ImagePanel ip;

  public void init() {
    // COUNTパラメータを読み取る
    String str = getParameter("count");
    count = Integer.parseInt(str);

    // イメージの配列を割り当て、初期化する
    images = new Image[count];
    for(int i = 0; i < count; i++) {
      String filename = getParameter("file" + i);
      images[i] = getImage(getDocumentBase(),
        filename);
    }

    // MSECパラメータを読み取る
    str = getParameter("msec");
    msec = Integer.parseInt(str);

    // コンテンツペインに配置
    ip = new ImagePanel();
    getContentPane().add(ip);

    // スレッドを作成して開始する
    Thread thread = new Thread(this);
    thread.start();

    // マウスクリックを処理するために登録する
    addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent me) {
        suspendFlag = !suspendFlag;
      }
    });
  }

  public void run() {
    try {
      while(true)  {
        Thread.sleep(msec);
        if (suspendFlag)
          continue;
        ++index;
        if (index >= count)
          index = 0;
        ip.setImage(images[index]);
        repaint();
      }
    }
    catch (Exception e) {
    }
  }
}

class ImagePanel extends JPanel {
  Image img;

  public void setImage(Image img) {
    this.img = img;
  }

  public void paintComponent(Graphics g) {
    g.drawImage(img, 0, 0, this);
  }
}

【2】 
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
/*
  <applet code="Windmill" width=300 height=300>
  </applet>
*/

public class Windmill extends JApplet
implements Runnable {
  boolean operate;

  public void init() {
    getContentPane().add(new MillPanel());

    // スレッドを作成して風車をアニメーション化する
    Thread thread = new Thread(this);
    thread.start();

    // マウスドラッグの無名インナクラス
    addMouseMotionListener(new MouseMotionAdapter() {
      public void mouseDragged(MouseEvent me) {
        operate = true;
      }
    });

    // マウスクリックの無名インナクラス
    addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent me) {
        operate = false;
      }
    });
  }

  public void run() {
    try {
      while(true) {
        Thread.sleep(100);
        if (operate)
          repaint();
      }
    }
    catch (Exception e) {
    }
  }
}

class MillPanel extends JPanel {
  double radians;

  public void paintComponent(Graphics g) {
    // 風車のアームの長さを計算する
    Dimension d = getSize();
    int r = (d.width > d.height) ? d.width : d.height;
    r = (int)(0.3 * r);

    // 表示エリアの中心を計算する
    int xc = d.width / 2;
    int yc = d.height / 2;

    // 縦長の塔を描画する
    g.drawLine(xc, d.height, xc, yc);

    // 1本目のアームを描画する
    int x = xc + (int)(r * Math.cos(radians));
    int y = yc - (int)(r * Math.sin(radians));
    g.drawLine(xc, yc, x, y);

    // 2本目のアームを描画する
    x = xc + (int)(r * Math.cos(radians + Math.PI / 2));
    y = yc - (int)(r * Math.sin(radians + Math.PI / 2));
    g.drawLine(xc, yc, x, y);

    // 3本目のアームを描画する
    x = xc + (int)(r * Math.cos(radians + Math.PI));
    y = yc - (int)(r * Math.sin(radians + Math.PI));
    g.drawLine(xc, yc, x, y);

    // 4本目のアームを描画する
    x = xc + (int)(r * Math.cos(radians + 1.5 * Math.PI));
    y = yc - (int)(r * Math.sin(radians + 1.5 * Math.PI));
    g.drawLine(xc, yc, x, y);

    // ラジアンを増分する
    radians += Math.PI / 180;
  }
}
