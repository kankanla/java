第6章 サンプルコード
・・・・・・・・・・・・・・・・・・・・・
目次（ページ番号）
■P178
■P179
■P181
■P182-1
■P182-2
■P183
■P185
■P186
■P187
■P188
■P191
■P192
■P195
■P196
■P198
■P199
■P201
■P202
■P204
・・・・・・・・・・・・・・・・・・・・・

■P178
class X {
}

class X1 extends X {          // xを拡張
}

class X2 extends X {          // xを拡張
}

class X11 extends X1 {        // x1を拡張
}

class X12 extends X1 {        // x1を拡張
}

class X21 extends X2 {        // x2を拡張
}

class X22 extends X2 {        // x2を拡張
}

class InheritanceHierarchy {
  public static void main(String args[]) {
    X x;
    System.out.println("Instantiating X");
    x = new X();
    System.out.println("Instantiating X1");
    x = new X1();
    System.out.println("Instantiating X11");
    x = new X11();
    System.out.println("Instantiating X12");
    x = new X12();
    System.out.println("Instantiating X2");
    x = new X2();
    System.out.println("Instantiating X21");
    x = new X21();
    System.out.println("Instantiating X22");
    x = new X22();
  }
}

■P179
class Parent {
}

class Child extends Parent {
}

class ObjectReferenceVariable {
  public static void main(String args[]) {
    Parent p;
    p = new Parent();
    p = new Child();
    Child c;
    c = new Child();
    c = new Parent();
  }
}

■P181
class W {
  float f;
}

class X extends W {
  StringBuffer sb;
}

class Y extends X {
  String s;
}

class Z extends Y {
  Integer i;
}

class Wxyz {
  public static void main(String args[]) {
    Z z = new Z();
    z.f = 4.567f;
    z.sb = new StringBuffer("abcde");
    z.s = "Teach Yourself Java";
    z.i = new Integer(41);
    System.out.println("z.f = " + z.f);
    System.out.println("z.sb = " + z.sb);
    System.out.println("z.s = " + z.s);
    System.out.println("z.i = " + z.i);
  }
}

■P182-1
class E {
  int x;
}

class F extends E {
  String x; // Eのint Xは隠される
}

class Ef {
  public static void main(String args[]) {
    F f = new F();
    f.x = "This is a string";
    System.out.println("f.x = " + f.x);
    E e = new E();
    e.x = 45;
    System.out.println("e.x = " + e.x);
  }
}

■P182-2
class P {
  static int x;
}

class Q extends P {
  static String x; // Pのint Xは隠される
}

class Pq {
  public static void main(String args[]) {
    P p = new P();
    p.x = 55;
    System.out.println("p.x = " + p.x);
    Q q = new Q();
    q.x = "This is a string";
    System.out.println("q.x = " + q.x);
  }
}

■P183
class M100 {
  int i = 100;
}

class M200 extends M100 {
  int i = 200;
  void display() {
    // このクラスの変数i
    System.out.println("i = " + i);
    // 上位クラスM100の変数i
    System.out.println("super.i = " + super.i);
  }
}

class SuperKeyword {
  public static void main(String args[]) {
    M200 m200 = new M200();
    m200.display();
  }
}

■P185
class A1 {
  void hello() {
    System.out.println("Hello from A1");
  }
}

class B1 extends A1 {
  void hello() {
    System.out.println("Hello from B1");
  }
}

class C1 extends B1 {
  void hello() {
    System.out.println("Hello from C1");
  }
}

class MethodOverriding1 {
  public static void main(String args[]) {
    C1 obj = new C1();
    obj.hello();
  }
}

■P186
class A2 {
  void hello() {
    System.out.println("Hello from A2");
  }
}

class B2 extends A2 {
  void hello() {
    System.out.println("Hello from B2");
  }
}

class C2 extends B2 {
  void hello() {
    System.out.println("Hello from C2");
  }
}

class MethodOverriding2 {
  public static void main(String args[]) {
    A2 obj = new C2();
    obj.hello();
  }
}

■P187
class A3 {
  void hello() {
    System.out.println("Hello from A3");
  }
  void hello(int i) {
    System.out.println("Hello from A3 " + i);
  }
}

class B3 extends A3 {
  void hello() {
    System.out.println("Hello from B3");
  }
}

class C3 extends B3 {
  void hello(String s) {
    System.out.println("Hello from C3 " + s);
  }
}

class MethodOverriding3 {
  public static void main(String args[]) {
    A3 obj = new C3();
    obj.hello();
  }
}

■P188
class I1 {
  void hello(String s) {
    System.out.println("I1: " + s);
  }
}

class J1 extends I1 {
  void hello(String s) {
    // スーパークラスのhelloメソッドを呼び出し
    super.hello(s);
    System.out.println("J1: " + s);
  }
}

class K1 extends J1 {
  void hello(String s) {
    // スーパークラスのhelloメソッドを呼び出し
    super.hello(s);
    System.out.println("K1: " + s);
  }
}

class SuperForMethods1 {
  public static void main(String args[]) {

    System.out.println("Instantiating I1");
    I1 obj = new I1();
    obj.hello("Good morning");

    System.out.println("Instantiating J1");
    obj = new J1();
    obj.hello("Good afternoon");

    System.out.println("Instantiating K1");
    obj = new K1();
    obj.hello("Good evening");
  }
}

■P191
class S1 {
  int s1;
  S1() {
    System.out.println("S1 Constructor");
    s1 = 1;
  }
}

class T1 extends S1 {
  int t1;
  T1() {
    System.out.println("T1 Constructor");
    t1 = 2;
  }
}

class U1 extends T1 {
  int u1;
  U1() {
    System.out.println("U1 Constructor");
    u1 = 3;
  }
}

class InheritanceAndConstructors1 {
  public static void main(String args[]) {
    U1 u1 = new U1();
    System.out.println("u1.s1 = " + u1.s1);
    System.out.println("u1.t1 = " + u1.t1);
    System.out.println("u1.u1 = " + u1.u1);
  }
}

■P192
class S2 {
  int s2;
  S2(int s2) {
    this.s2 = s2;
  }
}

class T2 extends S2 {
  int t2;
  T2(int s2, int t2) {
    super(s2);
    this.t2 = t2;
  }
}

class U2 extends T2 {
  int u2;
  U2(int s2, int t2, int u2) {
    super(s2, t2);
    this.u2 = u2;
  }
}

class InheritanceAndConstructors2 {
  public static void main(String args[]) {
    U2 u2 = new U2(1, 2, 3);
    System.out.println("u2.s2 = " + u2.s2);
    System.out.println("u2.t2 = " + u2.t2);
    System.out.println("u2.u2 = " + u2.u2);
  }
}

■P195
// 抽象クラスShape
abstract class Shape {
  void display() {
  }
}

class Circle extends Shape {
  void display() {
    System.out.println("Circle");
  }
}

class Rectangle extends Shape {
  void display() {
    System.out.println("Rectangle");
  }
}

class Triangle extends Shape {
  void display() {
    System.out.println("Triangle");
  }
}

class AbstractClassDemo {
  public static void main(String args[]) {
    Shape s = new Circle();
    s.display();
    s = new Rectangle();
    s.display();
    s = new Triangle();
    s.display();
  }
}

■P196
// finalクラスV1
final class V1 {
}

class V2 extends V1 {
}

class FinalClass {
  public static void main(String args[]) {
    V1 obj = new V1();
  }
}

■P198
class L {
  static final int x = 5;
}

class FinalVariable {
  public static void main(String args[]) {
    System.out.println(L.x);
  }
}

■P199
class Person {
  String name;
  int age;

  public Person(String name, int age) {
    this.name = name;
    this.age = age;
  }

  private Person() {
  }
}

class PrivateConstructor {
  public static void main(String args[]) {
    // publicコンストラクタは呼び出せる
    Person p1 = new Person("John", 30);
    System.out.println(p1.name);
    System.out.println(p1.age);

    // privateコンストラクタは呼び出せない
    // Person p2 = new Person();
  }
}

■P201
abstract class JetPlane {
  abstract int numEngines();
}

class DC8 extends JetPlane {
  int numEngines() {
    return 4;
  }
}

class DC10 extends JetPlane  {
  int numEngines() {
    return 3;
  }
}

class JetPlanes {
  public static void main(String args[]) {
    System.out.println(new DC8().numEngines());
    System.out.println(new DC10().numEngines());
  }
}

■P202
class Singleton {
  static Singleton singleton;

  private Singleton() {
  }

  public static Singleton getInstance() {
    if(singleton == null)
      // singletonオブジェクトがまだないときには作成
      singleton = new Singleton();
    // singletonオブジェクトを返す
    return singleton;
  }
}

class SingletonDemo {
  public static void main(String args[]) {
    Singleton s1 = Singleton.getInstance();
    Singleton s2 = Singleton.getInstance();
    if (s1 == s2)
      System.out.println("Equal");
    else
      System.out.println("Not equal");
  }
}

■P204
class ClassDemo {
  public static void main(String args[]) {
    Integer obj = new Integer(8);
    Class cls = obj.getClass();
    System.out.println(cls);
  }
}
